const { Client, GatewayIntentBits, ActionRowBuilder, StringSelectMenuBuilder, StringSelectMenuOptionBuilder, EmbedBuilder, ButtonBuilder, ButtonStyle, ChannelType, PermissionsBitField, Events, SlashCommandBuilder} = require('discord.js');
const fs = require('fs');
const path = require('path');
const { sendTicketTranscript } = require('./transcript'); // Fun√ß√£o para gerar o transcript
const { GuildMember } = require('discord.js');


// Configura√ß√£o do Cliente Discord
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.DirectMessages
  ]
});

// Definindo IDs e vari√°veis
const GUILD_ID = '1343981529180798976'; // ID do servidor
const TICKET_CHANNEL_ID = '1344094042354356385'; // Canal onde a mensagem de tickets ser√° fixada
const SUPPORT_ROLE_ID = '1344827633027907698'; // Cargo da equipa de suporte
// const TRANSCRIPT_CHANNEL_ID = '1348962636254941246'; // Canal de transcri√ß√µes
// const transcriptChannelId = '1348962636254941246'; // Canal para enviar o transcript
const verificationChannelId = '1344092239160147968'; // Canal de verifica√ß√£o
const roleId = '1344822739231572069'; // ID da role de verifica√ß√£o

// Tipos de ticket e categorias
const ticketCategories = [
  { name: 'Processo Penal', label: 'üìù Processo Penal', description: 'Consultas sobre processos penais, queixas e audi√™ncias.' },
  { name: 'Recurso', label: '‚öñÔ∏è Abertura de Recurso', description: 'Caso n√£o tenha concordado com a senten√ßa, voc√™ pode abrir um recurso.' },
  { name: 'Legaliza√ß√µes Empresariais', label: 'üè¢ Legaliza√ß√µes Empresariais', description: 'Registo de empresas e consultoria sobre documentos.' },
  { name: 'Legaliza√ß√£o de Viaturas', label: 'üöó Legaliza√ß√£o de Viaturas', description: 'Legaliza√ß√£o de ve√≠culos, registos e licenciamento.' },
  { name: 'Pulseiras Eletr√¥nicas', label: '‚õìÔ∏è Pulseiras Eletr√¥nicas', description: 'Solicita√ß√µes para instala√ß√£o ou remo√ß√£o de pulseiras.' },
  { name: 'Agendamento', label: 'üìÖ Agendamento', description: 'Agendamento de atendimentos, audi√™ncias e consultas.' },
  { name: 'Remo√ß√£o de Registo Criminal', label: 'üóëÔ∏è Remo√ß√£o de Registo Criminal', description: 'Solicita√ß√£o para remo√ß√£o de registos criminais e hist√≥ricos.' }
];

// Embed principal com op√ß√µes de ticket (visual aprimorado)
const embedTicket = new EmbedBuilder()
  .setColor('#8A2BE2') // Cor roxa elegante
  .setTitle('‚öñÔ∏è **Bem-vindo ao Tribunal - Sistema de Tickets**')
  .setDescription(
    'üìå **Escolhe a categoria adequada para o seu atendimento:**\n\n' +
    'üîπ Para garantir um suporte eficiente, seleciona a op√ß√£o mais adequada abaixo.\n' +
    'üîπ Um membro da comarca responder√° assim que poss√≠vel.\n\n' +
    'üí° **Nota:** Evite abrir m√∫ltiplos tickets sobre o mesmo assunto.'
  )
  .addFields(
    { name: 'üìú **Como Funciona?**', value: '1Ô∏è‚É£ Escolhe a categoria abaixo.\n2Ô∏è‚É£ Um canal privado ser√° criado.\n3Ô∏è‚É£ Um membro da comarca responder√° em breve.' },
    { name: '‚ö†Ô∏è **Regras do Ticket**', value: '‚úÖ Seja respeitoso e objetivo.\n‚úÖ Forne√ßa todas as informa√ß√µes necess√°rias.\n‚ùå N√£o abuses do sistema.\n‚ùå A abertura de tickets desnecess√°rios pode levar a puni√ß√µes.' }
  )
  .setThumbnail('https://r2.fivemanage.com/vaMjart5DMZrcUigoNkWc/image/SPNB.png') // √çcone do tribunal
  .setFooter({ text: 'Suporte Judici√°rio | 2025 HavenRP', iconURL: 'https://r2.fivemanage.com/vaMjart5DMZrcUigoNkWc/image/SPNB.png' });

// Criando um menu suspenso para selecionar o tipo de ticket
const selectMenu = new ActionRowBuilder().addComponents(
  new StringSelectMenuBuilder()
    .setCustomId('ticket_selecao')
    .setPlaceholder('üìå Selecione a op√ß√£o desejada...')
    .addOptions(
      ticketCategories.map(category => 
        new StringSelectMenuOptionBuilder()
          .setLabel(category.label)
          .setValue(category.name)
          .setDescription(category.description)
      )
    )
);

// Quando o bot se conecta
client.once('ready', async () => {
  console.log('‚úÖ Bot est√° online!');

  const guild = client.guilds.cache.get(GUILD_ID);
  if (!guild) {
    console.error('‚ùå Servidor n√£o encontrado.');
    return;
  }

  const ticketChannel = guild.channels.cache.get(TICKET_CHANNEL_ID);
  if (!ticketChannel) {
    console.error('‚ùå Canal de tickets n√£o encontrado.');
    return;
  }

  try {
    // Criar categorias, se n√£o existirem
    for (const category of ticketCategories) {
      let existingCategory = guild.channels.cache.find(c => c.name.toLowerCase() === category.name.toLowerCase() && c.type === ChannelType.GuildCategory);

      if (!existingCategory) {
        // Criando uma nova categoria
        await guild.channels.create({
          name: category.name,
          type: ChannelType.GuildCategory,
        });
        console.log(`Categoria criada: ${category.name}`);
      } else {
        console.log(`Categoria j√° existe: ${category.name}`);
      }
    }

    // Verifica se j√° existe uma mensagem do bot fixada
    const messages = await ticketChannel.messages.fetch();
    let existingMessage = messages.find(msg => msg.author.id === client.user.id);

    if (!existingMessage) {
      // Se a mensagem n√£o estiver fixada, cria e fixa
      const sentMessage = await ticketChannel.send({ embeds: [embedTicket], components: [selectMenu] });
      await sentMessage.pin();
      console.log('üìå Mensagem de ticket fixada com sucesso!');
    } else {
      console.log('üìå Mensagem j√° estava fixada.');
      existingMessage = await ticketChannel.messages.fetch(existingMessage.id); // Pega a mensagem existente para edi√ß√µes
          // Atualiza a mensagem fixada com novos dados
          await existingMessage.edit({
            embeds: [embedTicket],  // Atualiza o embed com o conte√∫do do sistema de tickets
            components: [selectMenu] // Atualiza o menu suspenso de categorias
          });
        }
  } catch (err) {
    console.error('Erro ao verificar ou enviar mensagem de ticket:', err);
  }
});

// Registar o comando /rename para renomear o canal do ticket
client.on('ready', async () => {
  const commands = [
    new SlashCommandBuilder()
      .setName('rename')
      .setDescription('Renomeia o canal do ticket')
      .addStringOption(option =>
        option.setName('nome_do_ticket')
          .setDescription('Novo nome para o ticket')
          .setRequired(true)
      ),
  ];

  await client.guilds.cache.get(GUILD_ID).commands.set(commands);
});

// Lidar com as intera√ß√µes de tickets
client.on(Events.InteractionCreate, async (interaction) => {
  if (interaction.isStringSelectMenu() && interaction.customId === 'ticket_selecao') {
    // C√≥digo existente para intera√ß√µes do tipo de ticket...
  }

  // Lidar com a intera√ß√£o do comando /rename
  if (interaction.isCommand() && interaction.commandName === 'rename') {
    const ticketChannel = interaction.channel;
    const newName = interaction.options.getString('nome_do_ticket'); // Obt√©m o novo nome do ticket

    // Verifica se o canal √© um ticket
    if (!ticketChannel.name.startsWith('üé´-')) {
      return await interaction.reply({ content: '‚ùå Este canal n√£o √© um ticket.', ephemeral: true });
    }

    try {
      // Renomeia o canal
      await ticketChannel.setName(`üé´-${newName}`);
      await interaction.reply({ content: `‚úÖ O ticket foi renomeado para: **${newName}**.`, ephemeral: true });
    } catch (error) {
      console.error('Erro ao renomear o canal:', error);
      await interaction.reply({ content: '‚ùå Ocorreu um erro ao tentar renomear o ticket. Tente novamente mais tarde.', ephemeral: true });
    }
  }
});

// Fun√ß√£o para salvar o transcript do ticket
async function saveTicketTranscript(ticketChannel) {
  try {
    // Pega todas as mensagens no canal de ticket
    const messages = await ticketChannel.messages.fetch({ limit: 100 }); // Ajuste o n√∫mero conforme necess√°rio

    // Cria um arquivo de texto com o conte√∫do das mensagens
    const transcript = messages
      .reverse() // Reverte para a ordem correta
      .map(msg => `[${msg.author.tag}] ${msg.content}`)
      .join('\n');

    // Define o caminho do arquivo de transcript
    const filePath = path.join(__dirname, 'transcripts', `${ticketChannel.name}-transcript.txt`);

    // Cria o diret√≥rio 'transcripts' se n√£o existir
    if (!fs.existsSync(path.dirname(filePath))) {
      fs.mkdirSync(path.dirname(filePath));
    }

    // Salva o transcript no arquivo
    fs.writeFileSync(filePath, transcript);
    console.log(`Transcript do ticket ${ticketChannel.name} salvo em ${filePath}`);

    return filePath;
  } catch (error) {
    console.error('Erro ao salvar o transcript:', error);
    return null;
  }
}

// Intera√ß√µes de tickets
client.on(Events.InteractionCreate, async (interaction) => {
  if (interaction.isStringSelectMenu() && interaction.customId === 'ticket_selecao') {
    const selectedValue = interaction.values[0]; // Valor selecionado
    const userId = interaction.user.id; // ID do usu√°rio
    const guild = interaction.guild; // Servidor

    try {
      // Verifica se a intera√ß√£o foi deferida antes de continuar
      if (!interaction.deferred && !interaction.replied) {
        await interaction.deferReply({ ephemeral: true }); // Deferir a intera√ß√£o se ainda n√£o foi respondida
      }

      // Verifica se a categoria existe
      let ticketCategory = guild.channels.cache.find(c => c.name === selectedValue && c.type === ChannelType.GuildCategory);

      if (!ticketCategory) {
        console.error(`‚ùå Categoria n√£o encontrada: ${selectedValue}`);
        return await interaction.followUp({ content: '‚ùå N√£o foi poss√≠vel encontrar a categoria solicitada. Tente novamente mais tarde.', flags: 64 });
      }

      // Criando o canal do ticket
      const ticketChannel = await guild.channels.create({
        name: `üé´-${interaction.user.username}-${selectedValue}`,
        type: ChannelType.GuildText,
        parent: ticketCategory.id,
        permissionOverwrites: [
          { id: guild.id, deny: [PermissionsBitField.Flags.ViewChannel] },
          { id: userId, allow: [PermissionsBitField.Flags.ViewChannel, PermissionsBitField.Flags.SendMessages, PermissionsBitField.Flags.ReadMessageHistory] },
          { id: SUPPORT_ROLE_ID, allow: [PermissionsBitField.Flags.ViewChannel, PermissionsBitField.Flags.SendMessages, PermissionsBitField.Flags.ReadMessageHistory] }
        ]
      });

      console.log(`Canal de ticket criado: ${ticketChannel.name}`);

      // Mensagem no canal do ticket
      const embedTicketChannel = new EmbedBuilder()
        .setColor('#8A2BE2')
        .setTitle('üé´ **Ticket Aberto**')
        .setDescription(`üîí **Ticket Aberto com Sucesso!**\n\nOl√° ${interaction.user}, o teu ticket foi aberto com sucesso e est√° a aguardar a aten√ß√£o de um dos nossos membros da comarca.\n\n**üìå Categoria Selecionada**: ${selectedValue.charAt(0).toUpperCase() + selectedValue.slice(1)}\n\nüíº Um dos nossos membros estar√° a analisar o teu caso e responder√° o mais breve poss√≠vel.\n\n‚öôÔ∏è **O que fazer agora?**\n- Aguarda enquanto preparamos as informa√ß√µes necess√°rias para a tua solicita√ß√£o.\n- N√£o hesites em fornecer mais detalhes, se necess√°rio, para agilizar o atendimento.\n\nüîî **Estado**: Aberto - Em breve, um membro da equipa entrar√° em contacto.\n\nüí¨ Caso tenhas alguma d√∫vida adicional, n√£o hesites em enviar-nos uma mensagem aqui no canal!\n\nAgradecemos por utilizares o nosso sistema de suporte!\n\nüîó **Suporte Judici√°rio | 2025 HavenRP`)
        .setFooter({ text: 'Suporte Judici√°rio', iconURL: 'https://r2.fivemanage.com/vaMjart5DMZrcUigoNkWc/image/SPNB.png' });

      const closeButton = new ActionRowBuilder().addComponents(
        new ButtonBuilder().setCustomId('fechar_ticket').setLabel('Fechar Ticket').setStyle(ButtonStyle.Danger)
      );

      await ticketChannel.send({ embeds: [embedTicketChannel], components: [closeButton] });

      // Registra o ticket no banco de dados
      const createdAt = new Date().toISOString();
      db.run('INSERT INTO Tickets (userId, channelId, status, createdAt, updatedAt) VALUES (?, ?, "open", ?, ?)', 
        [userId, ticketChannel.id, createdAt, createdAt]);

      console.log(`Ticket registrado no banco de dados para o usu√°rio: ${userId}`);

      // Responde ao usu√°rio
      await interaction.followUp({ content: `‚úÖ O teu ticket foi criado em: ${ticketChannel}`, flags: 64 });
    } catch (error) {
      console.error('Erro ao processar a intera√ß√£o do ticket:', error);
      if (!interaction.replied) {
        await interaction.followUp({ content: '‚ùå Ocorreu um erro ao criar o teu ticket. Tente novamente mais tarde.', flags: 64 });
      }
    }
  }

  // Intera√ß√£o para fechar o ticket
  if (interaction.isButton() && interaction.customId === 'fechar_ticket') {
    try {
      // Garantir que a intera√ß√£o foi deferida antes de responder
      if (!interaction.deferred && !interaction.replied) {
        await interaction.deferReply({ ephemeral: true });
      }

      const confirmationEmbed = new EmbedBuilder()
        .setColor('#8A2BE2')
        .setTitle('‚ùó Confirma√ß√£o de encerramento')
        .setDescription('Tens a certeza que deseja fechar este ticket?')
        .setFooter({ text: 'Clica no bot√£o abaixo para confirmares o encerramento.' });

      const confirmationButton = new ActionRowBuilder().addComponents(
        new ButtonBuilder().setCustomId('confirmar_encerramento').setLabel('Fechar Ticket').setStyle(ButtonStyle.Danger),
        new ButtonBuilder().setCustomId('cancelar_encerramento').setLabel('Cancelar').setStyle(ButtonStyle.Secondary)
      );

      await interaction.followUp({ embeds: [confirmationEmbed], components: [confirmationButton] });
    } catch (error) {
      console.error('Erro ao processar o encerramento do ticket:', error);
    }
  }

  // Confirma√ß√£o para fechar o ticket
  if (interaction.isButton() && interaction.customId === 'confirmar_encerramento') {
    const ticketChannel = interaction.channel;
    const userId = interaction.user.id;

    try {
      // Salvar transcri√ß√£o antes de fechar o ticket
      await saveTicketTranscript(ticketChannel, userId);

      // Atualiza o banco de dados para status fechado
      const updatedAt = new Date().toISOString();
      db.run('UPDATE Tickets SET status = "closed", updatedAt = ? WHERE channelId = ?', [updatedAt, ticketChannel.id]);

      // Fecha o canal
      ticketChannel.delete();
      console.log(`Ticket fechado e canal apagado: ${ticketChannel.name}`);
      
      await interaction.followUp({ content: '‚úÖ O ticket foi fechado com sucesso!', ephemeral: true });
    } catch (error) {
      console.error('Erro ao fechar o ticket:', error);
    }
  }

  // Cancelamento do encerramento do ticket
  if (interaction.isButton() && interaction.customId === 'cancelar_encerramento') {
    try {
      await interaction.followUp({ content: '‚ùå O encerramento do ticket foi cancelado.', ephemeral: true });
    } catch (error) {
      console.error('Erro ao cancelar o encerramento:', error);
    }
  }
});

// Embed para a mensagem de verifica√ß√£o
const embedVerification = new EmbedBuilder()
  .setColor('#8A2BE2') // Cor roxa elegante (mesma cor do embed de ticket)
  .setTitle('üîí **Sala de Verifica√ß√£o**')
  .setDescription(
    'üìå **Bem-vindo √† sala de verifica√ß√£o!**\n\n' +
    'üîπ Para acederes ao Tribunal e todas as suas funcionalidades, basta clicares no bot√£o de verifica√ß√£o abaixo.\n' +
    'üîπ Um membro da comarca estar√° √† disposi√ß√£o caso tenhas d√∫vidas ou problemas com o processo de verifica√ß√£o.\n\n' +
    'üí° **Nota:** Se encontrares algum problema, entra em contato com o Presidente.'
  )
  .addFields(
    { name: 'üîë **Como Funciona?**', value: '1Ô∏è‚É£ Clica no bot√£o "Verificar".\n2Ô∏è‚É£ Ser-te-√† dada a role de civil.\n3Ô∏è‚É£ Acesso completo ao Tribunal liberado ap√≥s verifica√ß√£o.' },
    { name: '‚ö†Ô∏è **Importante!**', value: '‚úÖ Certifica-te de clicares no bot√£o corretamente.\n‚ùå N√£o cliques m√∫ltiplas vezes no bot√£o.' }
  )
  .setThumbnail('https://r2.fivemanage.com/vaMjart5DMZrcUigoNkWc/image/SPNB.png') // √çcone do processo de verifica√ß√£o
  .setFooter({ text: 'Verifica√ß√£o | 2025 HavenRP', iconURL: 'https://r2.fivemanage.com/vaMjart5DMZrcUigoNkWc/image/SPNB.png' });

// Criando o bot√£o de verifica√ß√£o
const buttonVerify = new ButtonBuilder()
  .setCustomId('verify')
  .setLabel('Verificar')
  .setStyle(ButtonStyle.Primary);

// Criando a linha de a√ß√£o para o bot√£o
const rowVerify = new ActionRowBuilder().addComponents(buttonVerify);

// Quando o bot se conecta
client.once('ready', async () => {
  console.log('‚úÖ Bot est√° online!');

  const guild = client.guilds.cache.get(GUILD_ID);
  if (!guild) {
    console.error('‚ùå Servidor n√£o encontrado.');
    return;
  }

  const verificationChannel = guild.channels.cache.get(verificationChannelId);
  if (!verificationChannel) {
    console.error('‚ùå Canal de verifica√ß√£o n√£o encontrado.');
    return;
  }

  try {
    // Verifica se j√° existe uma mensagem do bot fixada
    const messages = await verificationChannel.messages.fetch();
    let existingMessage = messages.find(msg => msg.author.id === client.user.id);

    if (!existingMessage) {
      // Se a mensagem n√£o estiver fixada, cria e fixa
      const sentMessage = await verificationChannel.send({
        embeds: [embedVerification],
        components: [rowVerify]
      });
      await sentMessage.pin();
      console.log('üìå Mensagem de verifica√ß√£o fixada com sucesso!');
    } else {
      console.log('üìå Mensagem de verifica√ß√£o j√° estava fixada.');
      existingMessage = await verificationChannel.messages.fetch(existingMessage.id); // Pega a mensagem existente para edi√ß√µes

          // Atualiza a mensagem fixada com novos dados
          await existingMessage.edit({
            embeds: [embedVerification],  // Aqui voc√™ pode atualizar o embed com novas informa√ß√µes
            components: [rowVerify]        // Se necess√°rio, tamb√©m pode atualizar os componentes (bot√µes, etc.)
          });
        }
      } catch (err) {
        console.error('Erro ao verificar ou enviar mensagem de verifica√ß√£o:', err);
      }
    });
    
// Lida com intera√ß√µes dos bot√µes
client.on('interactionCreate', async (interaction) => {
  if (!interaction.isButton() || interaction.customId !== 'verify') return;

  const member = interaction.member;
  if (!member || !(member instanceof interaction.guild.members.constructor)) return;  // Usando a constru√ß√£o correta para garantir o tipo GuildMember.

  try {
    if (member.roles.cache.has(roleId)) {
      return interaction.reply({ content: 'Voc√™ j√° foi verificado!', ephemeral: true });
    }
    await member.roles.add(roleId);
    await interaction.reply({ content: 'Voc√™ foi verificado com sucesso!', ephemeral: true });
    console.log(`${interaction.user.tag} foi verificado e recebeu a role.`);
  } catch (error) {
    console.error('Erro ao verificar o membro:', error);
    interaction.reply({ content: 'Ocorreu um erro ao realizar a verifica√ß√£o. Tente novamente.', ephemeral: true });
  }
});

client.on('interactionCreate', async (interaction) => {
  // Verifica se a intera√ß√£o √© do tipo bot√£o
  if (!interaction.isButton()) return;

  if (interaction.customId === 'verify') {
    try {
      // Recupera o membro que clicou no bot√£o
      const member = await interaction.guild.members.fetch(interaction.user.id);

      // Verifica se o membro j√° tem a role de verifica√ß√£o
      if (member.roles.cache.has(roleId)) {
        return interaction.reply({ content: 'Voc√™ j√° foi verificado!', ephemeral: true });
      }

      // Adiciona a role de verifica√ß√£o ao membro
      await member.roles.add(roleId);

      // Responde ao usu√°rio
      await interaction.reply({ content: 'Voc√™ foi verificado com sucesso!', ephemeral: true });

      console.log(`${interaction.user.tag} foi verificado e recebeu a role.`);
    } catch (err) {
      console.error('Erro ao verificar o membro:', err);
      interaction.reply({ content: 'Ocorreu um erro ao realizar a verifica√ß√£o. Tente novamente.', ephemeral: true });
    }
  }
});

// Evento quando um canal de ticket √© apagado
client.on(Events.ChannelDelete, async (channel) => {
  if (channel.type !== 'GUILD_TEXT') return; // 
  if (!channel.name.startsWith('ticket-')) return; //

  try {
    const ticketId = channel.id;

    // Coletar todas as mensagens do canal do ticket
    const messages = await channel.messages.fetch({ limit: 10000000 }); // Ajuste o limite conforme necess√°rio

    // Chama a fun√ß√£o para gerar e enviar o transcript diretamente para o canal
    await sendTicketTranscript(messages, transcriptChannelId, ticketId);

    console.log(`Transcript do ticket #${ticketId} enviado para o canal de transcripts.`);
  } catch (err) {
    console.error(`Erro ao processar o encerramento do ticket: ${err.message}`);
  }
});

// Login do bot (use seu token aqui)
client.login('MTMzMTA4NzY5OTAxNjQxNzM2MQ.GdGt4y.7-ZhyfOHXCORfQZgxIvtXoVPmp2ug5xv48WFQo');